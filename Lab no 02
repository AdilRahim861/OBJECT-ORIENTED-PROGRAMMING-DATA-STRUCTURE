{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "071a4315-9404-48d1-a29a-59ab3ea2230b",
   "metadata": {},
   "source": [
    "# Lab report task"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "a8ca0536-81a9-470a-8a87-3cdd324f4d67",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_voltage(current, resistance):\n",
    "    return current * resistance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "6c875f2a-0b85-4139-b930-b681be0951f1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voltage (positional arguments): 50\n"
     ]
    }
   ],
   "source": [
    "# a. Positional arguments\n",
    "voltage = calculate_voltage(10, 5)\n",
    "print(\"Voltage (positional arguments):\", voltage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0004638f-d38b-41bd-9c96-ff687143fac7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voltage (keyword arguments): 50\n"
     ]
    }
   ],
   "source": [
    "# b. Keyword arguments\n",
    "voltage = calculate_voltage(current=10, resistance=5)\n",
    "print(\"Voltage (keyword arguments):\", voltage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "9573c52a-972c-4d78-8de5-525fe2565d43",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_voltage_with_defaults(current=1, resistance=1):\n",
    "    return current * resistance\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "ee974852-6f87-41cc-ad53-24e3e832fa4b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voltage (default arguments): 1\n"
     ]
    }
   ],
   "source": [
    "voltage = calculate_voltage_with_defaults()\n",
    "print(\"Voltage (default arguments):\", voltage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b716cb94-e079-4ad1-b4e8-e6180fd3f084",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voltage (mixed arguments): 50\n"
     ]
    }
   ],
   "source": [
    "# d. Mixed positional and keyword arguments\n",
    "voltage = calculate_voltage_with_defaults(10, resistance=5)\n",
    "print(\"Voltage (mixed arguments):\", voltage)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "13f309ff-7a95-470a-af4f-c8dbbcce2dc8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error (fewer arguments): calculate_voltage() missing 1 required positional argument: 'resistance'\n"
     ]
    }
   ],
   "source": [
    "# e. Passing fewer arguments to see the error\n",
    "try:\n",
    "    voltage = calculate_voltage(10)  # Missing resistance\n",
    "except TypeError as e:\n",
    "    print(\"Error (fewer arguments):\", e)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "25775b6c-5942-46ed-a089-205bc667e4c6",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "positional argument follows keyword argument (588388011.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[9], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    voltage = calculate_voltage(current=10, 5)\u001b[0m\n\u001b[1;37m                                             ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m positional argument follows keyword argument\n"
     ]
    }
   ],
   "source": [
    "# f. Positional arguments after keyword arguments (invalid case)\n",
    "try:\n",
    "    voltage = calculate_voltage(current=10, 5) \n",
    "except SyntaxError as e:\n",
    "    print(\"Error (positional after keyword):\", e)\n",
    "except TypeError as e:\n",
    "    print(\"Error (TypeError due to syntax mistake):\", e)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8887f041-5af2-4fd8-a933-da0f387b58f3",
   "metadata": {},
   "source": [
    "# Lab work tasks"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "35bb44ea-b725-422e-9a51-f6f942d3f651",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (2121050375.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[13], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    1. Observe the output of the following if:\u001b[0m\n\u001b[1;37m       ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "1. Observe the output of the following if:\n",
    "errno = 50159747054 \n",
    "`name = 'Bob'\n",
    "a. 'Hello, %s' % name\n",
    "b. 'Hey %s, there is a 0x%x error!' % (name, errno)\n",
    "c. 'Hey %(name)s, there is a 0x%(errno)x error!' % { \"name\": name, \"errno\": errno }\n",
    "2. Observe the output of: (Mostly used)\n",
    "a. 'Hello, {}'.format(name)\n",
    "3. Observe the output of: (Recommended for Python 3.6+)\n",
    "a. f'Hello, {name}!'\n",
    "4. Observe the output of:\n",
    "a.\n",
    "from string import Template \n",
    "2\n",
    "t = Template('Hey, $name!') \n",
    "st.substitute(name=name)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "232ee980-f241-4742-8328-4a434ab9bfac",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (4081976980.py, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[16], line 1\u001b[1;36m\u001b[0m\n\u001b[1;33m    b.\u001b[0m\n\u001b[1;37m      ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "b.\n",
    "templ_string = 'Hey $name, there is a $error error!'\n",
    "Template(templ_string).substitute(name=name, error=hex(errno))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b40a40a-70b1-4f2d-9c01-38abd358ba8d",
   "metadata": {},
   "source": [
    "# built in function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "2e6b63bb-2974-4f18-8251-425f528b3e9c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# i. Use len() for lists and strings\n",
    "list1 = [1, 2, 3, 4, 5]\n",
    "list2 = [10, 20, 30]\n",
    "list3 = []\n",
    "string1 = \"Hello\"\n",
    "string2 = \"Python\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e5ac0152-b061-439d-899f-09827328063e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Length of list1: 5\n",
      "Length of list2: 3\n",
      "Length of list3: 0\n",
      "Length of string1: 5\n",
      "Length of string2: 6\n"
     ]
    }
   ],
   "source": [
    "print(\"Length of list1:\", len(list1))\n",
    "print(\"Length of list2:\", len(list2))\n",
    "print(\"Length of list3:\", len(list3))\n",
    "print(\"Length of string1:\", len(string1))\n",
    "print(\"Length of string2:\", len(string2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "9e51f3a5-f506-4c82-8a46-a4fa31289bae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# ii. Use .is_integer()\n",
    "num1 = 5.0\n",
    "num2 = 10.5\n",
    "num3 = -3.0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "e667c1a2-2750-4cc7-8178-22bb7b47c6eb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Is num1 an integer: True\n",
      "Is num2 an integer: False\n",
      "Is num3 an integer: True\n"
     ]
    }
   ],
   "source": [
    "print(\"Is num1 an integer:\", num1.is_integer())\n",
    "print(\"Is num2 an integer:\", num2.is_integer())\n",
    "print(\"Is num3 an integer:\", num3.is_integer())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "cd2e5c46-e856-4329-9625-38e22ef93424",
   "metadata": {},
   "outputs": [],
   "source": [
    "# iii. Use .conjugate()\n",
    "complex1 = 3 + 4j\n",
    "complex2 = -2 - 3j\n",
    "complex3 = 7j"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "10f17d06-4aa1-4343-8364-a3024fb84c63",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Conjugate of complex1: (3-4j)\n",
      "Conjugate of complex2: (-2+3j)\n",
      "Conjugate of complex3: -7j\n"
     ]
    }
   ],
   "source": [
    "print(\"Conjugate of complex1:\", complex1.conjugate())\n",
    "print(\"Conjugate of complex2:\", complex2.conjugate())\n",
    "print(\"Conjugate of complex3:\", complex3.conjugate())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7af74dee-fa6d-46f9-a60a-7dbc4736c6ab",
   "metadata": {},
   "source": [
    "# Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "fa58a9ce-dce1-4e0e-8aea-67cc51950e71",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Student Information Function\n",
    "def student_info(name, reg_number):\n",
    "    print(f\"Student Name: {name}\")\n",
    "    print(f\"Registration Number: {reg_number}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "53cc5458-b294-4530-9f8c-b43a8afadfe4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student Name: Adil\n",
      "Registration Number: 0507\n"
     ]
    }
   ],
   "source": [
    "# a. Positional arguments\n",
    "student_info(\"Adil\", \"0507\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "291655fc-4b3b-43bb-afbc-edc79ffe87ec",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student Name: Adil\n",
      "Registration Number: 0507\n"
     ]
    }
   ],
   "source": [
    "# b. Keyword arguments\n",
    "student_info(name=\"Adil\", reg_number=\"0507\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "8dee4e14-af4b-441b-8f39-c216e0f646f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student Name: Adil\n",
      "Registration Number: 0507\n"
     ]
    }
   ],
   "source": [
    "# c. Default arguments\n",
    "def student_info_with_defaults(name=\"Adil\", reg_number=\"0507\"):\n",
    "    print(f\"Student Name: {name}\")\n",
    "    print(f\"Registration Number: {reg_number}\")\n",
    "student_info_with_defaults()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "f5f31ebe-df3c-4411-9ef6-64092d85d00f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Student Name: Adil\n",
      "Registration Number: 0507\n"
     ]
    }
   ],
   "source": [
    "# d. Mixed positional and keyword arguments\n",
    "student_info_with_defaults(\"Adil\", reg_number=\"0507\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "361bd49b-f350-4a60-b64c-dc982c5ae284",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error (fewer arguments): student_info() missing 1 required positional argument: 'reg_number'\n"
     ]
    }
   ],
   "source": [
    "# e. Passing fewer arguments to see the error\n",
    "try:\n",
    "    student_info(\"Adil\")  \n",
    "except TypeError as e:\n",
    "    print(\"Error (fewer arguments):\", e)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "b38f6f8a-38e9-4179-bcaf-1f4a89306c73",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "positional argument follows keyword argument (2835029322.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[33], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    student_info(name=\"Adil\", \"0507\")  # This will raise a SyntaxError\u001b[0m\n\u001b[1;37m                                    ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m positional argument follows keyword argument\n"
     ]
    }
   ],
   "source": [
    "# f. Positional arguments after keyword arguments (invalid case)\n",
    "try:\n",
    "    student_info(name=\"Adil\", \"0507\")  # This will raise a SyntaxError\n",
    "except SyntaxError as e:\n",
    "    print(\"Error (positional after keyword):\", e)\n",
    "except TypeError as e:\n",
    "    print(\"Error (TypeError due to syntax mistake):\", e)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "3160cb4a-6465-4ecb-af29-8f38793374bf",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_voltage(current, resistance):\n",
    "    return current * resistance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "21577fb0-d533-499c-91f6-21ac3b122ace",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voltage (positional arguments): 50\n"
     ]
    }
   ],
   "source": [
    "# a. Positional arguments\n",
    "voltage = calculate_voltage(10, 5)\n",
    "print(\"Voltage (positional arguments):\", voltage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "6a04f172-7efe-4cba-a1a8-deeb00bd0edd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voltage (keyword arguments): 50\n"
     ]
    }
   ],
   "source": [
    "# b. Keyword arguments\n",
    "voltage = calculate_voltage(current=10, resistance=5)\n",
    "print(\"Voltage (keyword arguments):\", voltage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "066377eb-fa3d-4fd3-9201-af684251f916",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_voltage_with_defaults(current=1, resistance=1):\n",
    "    return current * resistance\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "565ec52c-8dc9-4dd0-a34c-d3315f8578cb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voltage (default arguments): 1\n"
     ]
    }
   ],
   "source": [
    "voltage = calculate_voltage_with_defaults()\n",
    "print(\"Voltage (default arguments):\", voltage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c8c925ff-0980-404e-b702-7d1f1748b35f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Voltage (mixed arguments): 50\n"
     ]
    }
   ],
   "source": [
    "# d. Mixed positional and keyword arguments\n",
    "voltage = calculate_voltage_with_defaults(10, resistance=5)\n",
    "print(\"Voltage (mixed arguments):\", voltage)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6728004d-7a64-48b1-91c7-2e77ef043e52",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error (fewer arguments): calculate_voltage() missing 1 required positional argument: 'resistance'\n"
     ]
    }
   ],
   "source": [
    "# e. Passing fewer arguments to see the error\n",
    "try:\n",
    "    voltage = calculate_voltage(10)  # Missing resistance\n",
    "except TypeError as e:\n",
    "    print(\"Error (fewer arguments):\", e)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "9bbeda44-65eb-438d-b289-12859d9908ba",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "positional argument follows keyword argument (588388011.py, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[44], line 3\u001b[1;36m\u001b[0m\n\u001b[1;33m    voltage = calculate_voltage(current=10, 5)\u001b[0m\n\u001b[1;37m                                             ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m positional argument follows keyword argument\n"
     ]
    }
   ],
   "source": [
    "# f. Positional arguments after keyword arguments (invalid case)\n",
    "try:\n",
    "    voltage = calculate_voltage(current=10, 5) \n",
    "except SyntaxError as e:\n",
    "    print(\"Error (positional after keyword):\", e)\n",
    "except TypeError as e:\n",
    "    print(\"Error (TypeError due to syntax mistake):\", e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "ea518b03-ed60-48b4-9359-60c89cbe744c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to handle charging based on SOC\n",
    "def charge_from_solar(soc: float) -> None:\n",
    "\n",
    "    if soc < 20:\n",
    "        print(\"Charging... Battery is below 20%.\")\n",
    "    elif soc > 90:\n",
    "        return\n",
    "    else:\n",
    "        print(f\"Battery will be charged. Current charge: {soc}%\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "8ff7965c-02ca-41cd-92b4-e823e5d7b85c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print docstring\n",
    "print(charge_from_solar.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "579d0041-819a-4b15-9b7d-b33649f1a0b6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Charging... Battery is below 20%.\n",
      "Battery will be charged. Current charge: 50%\n"
     ]
    }
   ],
   "source": [
    "# Test cases\n",
    "charge_from_solar(15)  # Below 20%\n",
    "charge_from_solar(50)  # Between 20% and 90%\n",
    "charge_from_solar(95)  # Above 90%\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "04241a22-ae52-4201-9fd6-520541e2ee69",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Functions to calculate resistance, voltage, and current\n",
    "def resistance() -> list:\n",
    "  \n",
    "    return [5, 10, 15, 20, 25]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "93fc105c-2b14-46d6-8522-d817414430d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def voltage() -> list:\n",
    "   \n",
    "    return [50, 100, 150, 200, 250]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "e9c8f78a-0ec9-4259-b875-3bbe2b5af0cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "def current(resistances: list, voltages: list) -> dict:\n",
    "  \n",
    "    return {f\"current_{i+1}\": voltages[i] / resistances[i] for i in range(len(resistances))}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "f2134098-39a7-40e9-a675-a3552670788c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Main program\n",
    "resistances = resistance()\n",
    "voltages = voltage()\n",
    "currents = current(resistances, voltages)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "92fd34f5-3a23-46af-b4f4-d52e67cf6cbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Resistances: [5, 10, 15, 20, 25]\n",
      "Voltages: [50, 100, 150, 200, 250]\n",
      "Currents: {'current_1': 10.0, 'current_2': 10.0, 'current_3': 10.0, 'current_4': 10.0, 'current_5': 10.0}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "print(\"Resistances:\", resistances)\n",
    "print(\"Voltages:\", voltages)\n",
    "print(\"Currents:\", currents)  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "f28df988-6ffb-4c1c-8d84-ed6e6e9bf369",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Function to calculate total resistance in series\n",
    "def series(resistors: list | tuple) -> float:\n",
    " \n",
    "    return sum(resistors)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "ba3625ea-467a-46e0-884d-4f9eb4dcfd41",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print docstring\n",
    "print(series.__doc__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "0661e8c6-f2ab-49ff-84c3-de23bfb173e5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Net resistance (list): 75\n",
      "Net resistance (tuple): 30\n"
     ]
    }
   ],
   "source": [
    "# Test cases\n",
    "resistors_list = [5, 10, 15, 20, 25]\n",
    "net_resistance = series(resistors_list)\n",
    "print(\"Net resistance (list):\", net_resistance)\n",
    "\n",
    "resistors_tuple = (2, 4, 6, 8, 10)\n",
    "net_resistance_tuple = series(resistors_tuple)\n",
    "print(\"Net resistance (tuple):\", net_resistance_tuple)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "e32aeff8-5e30-4515-9218-49dc53794f59",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function Annotations: {'resistors': list | tuple, 'return': <class 'float'>}\n"
     ]
    }
   ],
   "source": [
    "# Display annotations\n",
    "print(\"Function Annotations:\", series.__annotations__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "85c07295-a9b7-415d-8ba9-4a57674b0d68",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Union, List, Tuple\n",
    "\n",
    "def parallel(resistances: Union[List[float], Tuple[float, ...]]) -> float:\n",
    "\n",
    "    if len(resistances) == 0:\n",
    "        raise ValueError(\"The list or tuple of resistances cannot be empty.\")\n",
    "    \n",
    "    # Calculate the net resistance using the formula: 1/R_net = 1/R1 + 1/R2 + ... + 1/Rn\n",
    "    reciprocal_sum = sum(1 / r for r in resistances)\n",
    "    \n",
    "    # Return the net resistance\n",
    "    return 1 / reciprocal_sum\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "0012b56e-5b82-4e08-80a1-cf2aa6a816f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print the docstring\n",
    "print(parallel.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "60be43dd-b741-4762-b972-aeb0503e406a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'resistances': typing.Union[typing.List[float], typing.Tuple[float, ...]], 'return': <class 'float'>}\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Display the annotations of the function\n",
    "print(parallel.__annotations__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "92ddafc6-8a5e-4db4-be09-90051f57ca40",
   "metadata": {},
   "outputs": [],
   "source": [
    "def series(*resistances: float) -> float:\n",
    "\n",
    "    if len(resistances) == 0:\n",
    "        raise ValueError(\"At least one resistor value must be provided.\")\n",
    "    \n",
    "    # Calculate the net resistance by summing all resistor values (since they are in series)\n",
    "    return sum(resistances)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "26b8505e-e2f2-4d62-9b9b-60d4fee6339c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print the docstring\n",
    "print(series.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "f938b747-c500-4050-8abc-ed4de457bf37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'resistances': <class 'float'>, 'return': <class 'float'>}\n"
     ]
    }
   ],
   "source": [
    "# Display the annotations of the function\n",
    "print(series.__annotations__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2edccdb6-3b41-4274-9c8c-25007a460752",
   "metadata": {},
   "outputs": [],
   "source": [
    "def parallel(*resistances: float) -> float:\n",
    "    if len(resistances) == 0:\n",
    "        raise ValueError(\"At least one resistor value must be provided.\")\n",
    "    \n",
    "    # Calculate the net resistance using the formula: 1/R_net = 1/R1 + 1/R2 + ... + 1/Rn\n",
    "    reciprocal_sum = sum(1 / r for r in resistances)\n",
    "    \n",
    "    # Return the net resistance\n",
    "    return 1 / reciprocal_sum\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "741bc5d0-2537-439b-a02e-25de3cb7622a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print the docstring\n",
    "print(parallel.__doc__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "0ac6c279-14d1-4c21-ba4f-8517f0ac6a3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'resistances': <class 'float'>, 'return': <class 'float'>}\n"
     ]
    }
   ],
   "source": [
    "# Display the annotations of the function\n",
    "print(parallel.__annotations__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "ee61608f-da84-441a-b8b1-3ccc4ee37e1c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from typing import Union, List, Tuple\n",
    "\n",
    "def print_inverter_data(data: Union[List[60], Tuple[2, 2, 60]]) -> None:\n",
    " \n",
    "    # Unpacking the data tuple/list\n",
    "    soc, solar_gen, market_price = data\n",
    "     # Printing the values in a formatted way\n",
    "    print(f\"Battery SOC: {60}%\")\n",
    "    print(f\"Solar Generation: {2} kW\")\n",
    "    print(f\"Market Price: ₹{60} per unit\")\n",
    "  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "44dbb50b-500f-4394-9747-691857552917",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "None\n"
     ]
    }
   ],
   "source": [
    "# Print the docstring\n",
    "print(print_inverter_data.__doc__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "dd2b7591-d961-4b1c-9744-41f894757bd5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'data': typing.Union[typing.List[60], typing.Tuple[2, 2, 60]], 'return': None}\n"
     ]
    }
   ],
   "source": [
    "# Display the annotations of the function\n",
    "print(print_inverter_data.__annotations__)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "c3e6a3c1-e853-4f0e-ba32-279a7cb59fb9",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Battery SOC: 60%\n",
      "Solar Generation: 2 kW\n",
      "Market Price: ₹60 per unit\n",
      "None\n",
      "{'data': typing.Dict[str, float], 'return': None}\n"
     ]
    }
   ],
   "source": [
    "from typing import Dict\n",
    "\n",
    "def print_solar_data(**data: Dict[str, float]) -> None:\n",
    "\n",
    "    # Printing the values in a formatted way\n",
    "    print(f\"Battery SOC: {data.get('SOC')}%\")\n",
    "    print(f\"Solar Generation: {data.get('solar_generation')} kW\")\n",
    "    print(f\"Market Price: ₹{data.get('price')} per unit\")\n",
    "\n",
    "# Example usage\n",
    "print_solar_data(SOC=60, solar_generation=2, price=60)\n",
    "\n",
    "# Print the docstring\n",
    "print(print_solar_data.__doc__)\n",
    "\n",
    "# Display the annotations of the function\n",
    "print(print_solar_data.__annotations__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "1000432a-001b-4fe1-a02d-5685539d3810",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a = 1\n",
      "b = 2\n",
      "args = ('foo', 'bar', 'baz', 'qux')\n",
      "kwargs = {'x': 100, 'y': 200, 'z': 300}\n"
     ]
    }
   ],
   "source": [
    "def f(a, b, *args, **kwargs):\n",
    " print(F'a = {a}')\n",
    " print(F'b = {b}')\n",
    " print(F'args = {args}')\n",
    " print(F'kwargs = {kwargs}')\n",
    "f(1, 2, 'foo', 'bar', 'baz', 'qux', x=100, y=200, z=300)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "70785b96-b138-4345-b474-b3cff4a83dac",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n",
      "8\n",
      "9\n",
      "7\n"
     ]
    }
   ],
   "source": [
    "def f(*args):\n",
    "    for i in args:\n",
    "        print(i)\n",
    "\n",
    "# Example usage\n",
    "a = [1, 2, 3]\n",
    "t = (4, 5, 6)\n",
    "s = {7, 8, 9}\n",
    "f(*a, *t, *s)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "056335ba-5db9-43ad-abc1-2342de941939",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "SOC: 60\n",
      "solar_generation: 2\n",
      "price: 60\n"
     ]
    }
   ],
   "source": [
    "def f(**kwargs):\n",
    "    for k, v in kwargs.items():\n",
    "        print(f\"{k}: {v}\")\n",
    "\n",
    "# Example usage\n",
    "f(SOC=60, solar_generation=2, price=60)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "b338618d-440a-4685-a833-2eb83d3852c7",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "a -> 1\n",
      "b -> 2\n",
      "x -> 3\n",
      "y -> 4\n"
     ]
    }
   ],
   "source": [
    "def f(**kwargs):\n",
    "    for k, v in kwargs.items():\n",
    "        print(k, '->', v)\n",
    "\n",
    "d1 = {'a': 1, 'b': 2}\n",
    "d2 = {'x': 3, 'y': 4}\n",
    "\n",
    "\n",
    "f(**d1, **d2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "a2d969a9-6d02-4eab-abdd-832d6e18eb67",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "2\n",
      "3\n",
      "4\n",
      "5\n",
      "6\n"
     ]
    }
   ],
   "source": [
    "def f(*args):\n",
    "    for i in args:\n",
    "        print(i)\n",
    "\n",
    "f(*[1, 2, 3], *[4, 5, 6])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "72e7b003-1920-4f1b-b674-0d0679770cbe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 foo\n",
      "{'a': <class 'int'>, 'b': <class 'str'>, 'return': <class 'float'>}\n"
     ]
    }
   ],
   "source": [
    "def f(a: int, b: str) -> float:\n",
    "    print(a, b)\n",
    "    return 3.5\n",
    "\n",
    "f(1, 'foo')\n",
    "\n",
    "print(f.__annotations__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "c84b6466-c95c-404a-aea5-161456205239",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'a': <class 'int'>, 'b': <class 'str'>, 'return': <class 'float'>}\n",
      "12 baz\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "3.5"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def f(a: int = 12, b: str = 'baz') -> float:\n",
    "    print(a, b)\n",
    "    return 3.5\n",
    "\n",
    "print(f.__annotations__)\n",
    "\n",
    "f()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "961743ad-8bcc-4f69-ba23-7e8bf0c306da",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 foo\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(1, 2, 3)"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def f(a: int, b: str) -> float:\n",
    "    print(a, b)\n",
    "    return 1, 2, 3 \n",
    "\n",
    "\n",
    "f(10, 'foo')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "51c8d6f6-7603-4a25-a9f8-4afe6bbe4b93",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
