{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "825f319d-1e50-48b5-b66e-8687dd0acf4c",
   "metadata": {},
   "source": [
    "# Lab report task:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5de70d3b-b70c-4e6b-9bc0-954408321fc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Point 1: x = 3, y = 4\n",
      "Point 2: x = 6, y = 8\n",
      "Distance between Point 1 and Point 2: 5.0\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "class Point:\n",
    "   \n",
    "    def __init__(self, x: float, y: float) -> None:\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def distance(self, p2: \"Point\") -> float:\n",
    "     \n",
    "        return math.sqrt((self.x - p2.x) ** 2 + (self.y - p2.y) ** 2)\n",
    "\n",
    "\n",
    "# Example usage:\n",
    "p1 = Point(3, 4)\n",
    "p2 = Point(6, 8)\n",
    "\n",
    "# Print the coordinates of p1\n",
    "print(f\"Point 1: x = {p1.x}, y = {p1.y}\")\n",
    "\n",
    "# Print the coordinates of p2\n",
    "print(f\"Point 2: x = {p2.x}, y = {p2.y}\")\n",
    "\n",
    "# Calculate and print the distance between p1 and p2\n",
    "print(f\"Distance between Point 1 and Point 2: {p1.distance(p2)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "73359bdc-8733-4fca-a8e1-55f48d946fcb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Using print directly:\n",
      "<__main__.Point object at 0x000002E568D9B5C0>\n",
      "<__main__.Point object at 0x000002E568D9AA20>\n",
      "\n",
      "Using dot operator:\n",
      "p1: x = 2, y = 3\n",
      "p2: x = 5, y = 7\n",
      "\n",
      "Using the new method:\n",
      "Point(2, 3)\n",
      "Point(5, 7)\n",
      "\n",
      "Distance between p1 and p2: 5.0\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "\n",
    "class Point:\n",
    "\n",
    "    def __init__(self, x: float, y: float) -> None:\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def distance(self, p2: \"Point\") -> float:\n",
    "        return math.sqrt((self.x - p2.x) ** 2 + (self.y - p2.y) ** 2)\n",
    "\n",
    "    def print_point(self) -> None:\n",
    "        print(f\"Point({self.x}, {self.y})\")\n",
    "\n",
    "\n",
    "\n",
    "p1 = Point(2, 3)\n",
    "\n",
    "\n",
    "p2 = Point(5, 7)\n",
    "\n",
    "\n",
    "print(\"Using print directly:\")\n",
    "print(p1)\n",
    "print(p2)\n",
    "\n",
    "print(\"\\nUsing dot operator:\")\n",
    "print(f\"p1: x = {p1.x}, y = {p1.y}\")\n",
    "print(f\"p2: x = {p2.x}, y = {p2.y}\")\n",
    "\n",
    "print(\"\\nUsing the new method:\")\n",
    "p1.print_point()\n",
    "p2.print_point()\n",
    "\n",
    "distance = p1.distance(p2)\n",
    "print(f\"\\nDistance between p1 and p2: {distance}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "77b93a6f-e6e3-40ce-a0c9-6be936ac54ad",
   "metadata": {},
   "source": [
    "# Lab work tasks:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e8cad000-8bb4-48d1-9c85-d77d80341d15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Assad Ullah\n"
     ]
    }
   ],
   "source": [
    "class Employee:\n",
    "    def __init__(self, name: str, age: int, position: str, start_year: int) -> None:\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "        self.position = position\n",
    "        self.start_year = start_year\n",
    "\n",
    "    def __repr__(self) -> str:\n",
    "        return (f\"Employee(name='{self.name}', age={self.age}, \"\n",
    "                f\"position='{self.position}', start_year={self.start_year})\")\n",
    "\n",
    "\n",
    "# Create employee objects\n",
    "Adil = Employee(\"Adil Rahim\", 21, \"captain\", 2023)\n",
    "Assad = Employee(\"Assad Ullah\", 20, \"Science Officer\", 2024)\n",
    "Aihab= Employee(\"Aihab Daud\", 21, \"Chief Medical Officer\", 2025)\n",
    "\n",
    "# a. Print the name of Kirk\n",
    "print(Assad.name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6bf89440-fc44-4e39-a846-2e303fbe9b05",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Adil's age: 21\n",
      "Assad's position: Science Officer\n",
      "Aihab's age: None\n",
      "\n",
      "Employee Details:\n",
      "Employee(name='Adil Rahim', age=21, position='Captain', start_year=2024)\n",
      "Employee(name='Assad ullah', age=21, position='Science Officer', start_year=2023)\n",
      "Employee(name='Aihab Daud', age=Unknown, position='Chief Medical Officer', start_year=2023)\n"
     ]
    }
   ],
   "source": [
    "class Employee:\n",
    "    def __init__(self, name: str, position: str, start_year: int, age: int = None) -> None:\n",
    "        self.name = name\n",
    "        self.age = age \n",
    "        self.position = position\n",
    "        self.start_year = start_year\n",
    "\n",
    "    def __repr__(self) -> str:\n",
    "        age_str = f\"{self.age}\" if self.age is not None else \"Unknown\"\n",
    "        return (f\"Employee(name='{self.name}', age={age_str}, \"\n",
    "                f\"position='{self.position}', start_year={self.start_year})\")\n",
    "\n",
    "\n",
    "# Creating employee objects\n",
    "Adil = Employee(\"Adil Rahim\", \"Captain\", 2024, 21)\n",
    "Assad = Employee(\"Assad ullah\", \"Science Officer\", 2023, 21)\n",
    "Aihab = Employee(\"Aihab Daud\", \"Chief Medical Officer\", 2023) \n",
    "\n",
    "\n",
    "print(f\"Adil's age: {Adil.age}\")\n",
    "print(f\"Assad's position: {Assad.position}\")\n",
    "print(f\"Aihab's age: {Aihab.age}\") \n",
    "\n",
    "# Printing the entire employee objects\n",
    "print(\"\\nEmployee Details:\")\n",
    "print(Adil)\n",
    "print(Assad)\n",
    "print(Aihab)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a19815a8-1f43-4f8a-84c5-61542daed45b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dog(name='Buddy', breed='Golden Retriever', age=3)\n",
      "Dog(name='Max', breed='Beagle', age=5)\n",
      "Dog(name='Charlie', breed='Poodle', age=2)\n",
      "Dog(name='Bella', breed='Bulldog', age=4)\n",
      "Charlie says: Woof! Woof!\n",
      "Bella says: Woof! Woof!\n"
     ]
    }
   ],
   "source": [
    "# dog.py\n",
    "class Dog:\n",
    "    def __init__(self, name: str, breed: str, age: int) -> None:\n",
    "        self.name = name\n",
    "        self.breed = breed\n",
    "        self.age = age\n",
    "\n",
    "    def bark(self) -> None:\n",
    "        print(f\"{self.name} says: Woof! Woof!\")\n",
    "\n",
    "    def __repr__(self) -> str:\n",
    "        return f\"Dog(name='{self.name}', breed='{self.breed}', age={self.age})\"\n",
    "\n",
    "\n",
    "# a. Instantiate a Dog object\n",
    "dog1 = Dog(\"Buddy\", \"Golden Retriever\", 3)\n",
    "print(dog1)  # Outputs the Dog's details\n",
    "\n",
    "# b. Assigning a Dog object to a variable\n",
    "inst = Dog(\"Max\", \"Beagle\", 5)\n",
    "print(inst)\n",
    "\n",
    "# c. Create two new Dog objects and assign them to variables a and b\n",
    "a = Dog(\"Charlie\", \"Poodle\", 2)\n",
    "b = Dog(\"Bella\", \"Bulldog\", 4)\n",
    "\n",
    "# Print the details of a and b\n",
    "print(a)\n",
    "print(b)\n",
    "\n",
    "# Call the bark method on the Dog objects\n",
    "a.bark()\n",
    "b.bark()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "715d4044-c721-4442-803f-19eee361ea85",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "<__main__.Dog object at 0x000002E568DC8AA0>\n",
      "<__main__.Dog object at 0x000002E568DC8710>\n"
     ]
    }
   ],
   "source": [
    "class Dog:\n",
    "    def __init__(self, name, breed):\n",
    "        self.name = name\n",
    "        self.breed = breed\n",
    "\n",
    "# Create two instances of the Dog class\n",
    "a = Dog(\"Buddy\", \"Golden Retriever\")\n",
    "b = Dog(\"Buddy\", \"Golden Retriever\")\n",
    "\n",
    "# Compare the two instances\n",
    "print(a == b) \n",
    "\n",
    "# Print the instances\n",
    "print(a)\n",
    "print(b)  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "cb3825d2-d0fc-47c3-a1f0-fc9cef4ca4ea",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "False\n",
      "False\n",
      "<__main__.MyFirstClass object at 0x000002E568DC8350>\n",
      "<__main__.MyFirstClass object at 0x000002E568DC9AC0>\n"
     ]
    }
   ],
   "source": [
    "# Define the class\n",
    "class MyFirstClass:\n",
    "    pass\n",
    "\n",
    "# a. Make two instances named FC1 and FC2\n",
    "FC1 = MyFirstClass()\n",
    "FC2 = MyFirstClass()\n",
    "\n",
    "# b. Check whether FC1 and FC2 represent the same object or not\n",
    "print(FC1 == FC2)\n",
    "print(FC1 is FC2)  \n",
    "# c. Use the print command and print both instances\n",
    "print(FC1) \n",
    "print(FC2) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "6958187d-1af3-4e98-8493-227456de357f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<__main__.Point object at 0x000002E568D9AA20>\n",
      "<__main__.Point object at 0x000002E568DC8F20>\n",
      "<__main__.Point object at 0x000002E568DC8380>\n",
      "pointA: x=10, y=20\n",
      "<__main__.Point object at 0x000002E568DC97C0>\n",
      "pointB: name='Origin', z=0\n",
      "pointA.data: [1, 2, 3]\n",
      "pointB.function(): Hello, World!\n"
     ]
    }
   ],
   "source": [
    "\n",
    "class Point:\n",
    "    pass\n",
    "\n",
    "# a. Make two instances named p1 and p2\n",
    "p1 = Point()\n",
    "p2 = Point()\n",
    "\n",
    "# b. Print both objects p1 and p2\n",
    "print(p1) \n",
    "print(p2) \n",
    "\n",
    "# c. Use different names for objects and assign attributes\n",
    "pointA = Point()\n",
    "pointB = Point()\n",
    "\n",
    "# Assigning attributes to the objects\n",
    "pointA.x = 10\n",
    "pointA.y = 20\n",
    "\n",
    "pointB.name = \"Origin\"\n",
    "pointB.z = 0\n",
    "\n",
    "# Print the new objects and their attributes\n",
    "print(pointA) \n",
    "print(f\"pointA: x={pointA.x}, y={pointA.y}\")\n",
    "\n",
    "print(pointB) \n",
    "print(f\"pointB: name='{pointB.name}', z={pointB.z}\")\n",
    "\n",
    "# Experiment with different data types for attributes\n",
    "pointA.data = [1, 2, 3]  # A list\n",
    "pointB.function = lambda: \"Hello, World!\"  # A function\n",
    "\n",
    "print(f\"pointA.data: {pointA.data}\")\n",
    "print(f\"pointB.function(): {pointB.function()}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3d893a4b-2379-433b-991e-9c66eb68a4b5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<__main__.Dog object at 0x000002E568D9B200>\n"
     ]
    }
   ],
   "source": [
    "class Dog:\n",
    "    def __init__(self, name, age):\n",
    "        self.name = name  \n",
    "        self.age = age    \n",
    "# a. Create an instance of Dog named miles\n",
    "miles = Dog(\"Miles\", 4)\n",
    "\n",
    "# b. Print the miles object\n",
    "print(miles)  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "11ac0299-1806-4112-af22-211ecda8e3f5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dog(name='Miles', age=4)\n"
     ]
    }
   ],
   "source": [
    "class Dog:\n",
    "    def __init__(self, name, age):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "\n",
    "    def __repr__(self):\n",
    "        return f\"Dog(name='{self.name}', age={self.age})\"\n",
    "\n",
    "# a. Create an instance of Dog named miles\n",
    "miles = Dog(\"Miles\", 4)\n",
    "\n",
    "# b. Print the miles object\n",
    "print(miles) \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "230a6ab0-c3ec-499c-82f6-23721fe6ff37",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dog1 species: Canis familiaris\n",
      "Dog2 species: Canis familiaris\n",
      "Dog1 name: Buddy, age: 5\n",
      "Dog2 name: Max, age: 3\n",
      "Class species: Canis familiaris\n"
     ]
    }
   ],
   "source": [
    "# dog.py\n",
    "class Dog:\n",
    "    # Class attribute\n",
    "    species = \"Canis familiaris\"\n",
    "\n",
    "    # Instance attributes\n",
    "    def __init__(self, name, age):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "\n",
    "# Create instances of the Dog class\n",
    "dog1 = Dog(\"Buddy\", 5)\n",
    "dog2 = Dog(\"Max\", 3)\n",
    "\n",
    "# Access class attribute\n",
    "print(f\"Dog1 species: {dog1.species}\")\n",
    "print(f\"Dog2 species: {dog2.species}\")\n",
    "\n",
    "# Access instance attributes\n",
    "print(f\"Dog1 name: {dog1.name}, age: {dog1.age}\")\n",
    "print(f\"Dog2 name: {dog2.name}, age: {dog2.age}\")\n",
    "\n",
    "# Access the class attribute directly through the class\n",
    "print(f\"Class species: {Dog.species}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "af06195a-7d3c-4d25-972d-7fbf63749dc6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error: Dog.__init__() missing 2 required positional arguments: 'name' and 'age'\n",
      "miles.name: Miles\n",
      "miles.age: 4\n",
      "buddy.name: Buddy\n",
      "buddy.age: 9\n",
      "Updated buddy.age: 10\n",
      "Updated miles.species: Felis silvestris\n",
      "buddy.species: Canis familiaris\n"
     ]
    }
   ],
   "source": [
    "class Dog:\n",
    "    # Class attribute\n",
    "    species = \"Canis familiaris\"\n",
    "\n",
    "    # Instance attributes\n",
    "    def __init__(self, name, age):\n",
    "        self.name = name\n",
    "        self.age = age\n",
    "\n",
    "# a. Instantiate the Dog class without arguments\n",
    "try:\n",
    "    dog = Dog() \n",
    "except TypeError as e:\n",
    "    print(f\"Error: {e}\")\n",
    "\n",
    "# b. Create instances of the Dog class with arguments\n",
    "miles = Dog(\"Miles\", 4)\n",
    "buddy = Dog(\"Buddy\", 9)\n",
    "\n",
    "# c. Access instance attributes using dot notation\n",
    "print(f\"miles.name: {miles.name}\")\n",
    "print(f\"miles.age: {miles.age}\")\n",
    "print(f\"buddy.name: {buddy.name}\")\n",
    "print(f\"buddy.age: {buddy.age}\")\n",
    "\n",
    "# d. Change attribute values dynamically\n",
    "buddy.age = 10  \n",
    "print(f\"Updated buddy.age: {buddy.age}\")\n",
    "\n",
    "miles.species = \"Felis silvestris\" \n",
    "print(f\"Updated miles.species: {miles.species}\")  \n",
    "print(f\"buddy.species: {buddy.species}\")  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "69cb523c-70db-43ba-82be-23f1742a2adb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p1: (3, 4)\n",
      "p2: (-5, 12)\n",
      "Location of p1: First Quadrant\n",
      "Location of p2: Second Quadrant\n",
      "Coordinates of p1: (3, 4)\n",
      "Coordinates of p2: (-5, 12)\n",
      "Point: (3, 4)\n",
      "Point: (-5, 12)\n",
      "Distance between p1 and p2: 11.31\n",
      "Class __dict__: {'__module__': '__main__', '__init__': <function Point.__init__ at 0x000002E568D85EE0>, 'distance': <function Point.distance at 0x000002E568D85F80>, 'locate': <function Point.locate at 0x000002E568D862A0>, '__repr__': <function Point.__repr__ at 0x000002E568D87CE0>, 'display_point': <function Point.display_point at 0x000002E568D87EC0>, '__dict__': <attribute '__dict__' of 'Point' objects>, '__weakref__': <attribute '__weakref__' of 'Point' objects>, '__doc__': None}\n",
      "p1 __dict__: {'x': 3, 'y': 4}\n",
      "p2 __dict__: {'x': -5, 'y': 12}\n",
      "Help on class Point in module __main__:\n",
      "\n",
      "class Point(builtins.object)\n",
      " |  Point(x: float, y: float)\n",
      " |\n",
      " |  Methods defined here:\n",
      " |\n",
      " |  __init__(self, x: float, y: float)\n",
      " |      Initialize self.  See help(type(self)) for accurate signature.\n",
      " |\n",
      " |  __repr__(self) -> str\n",
      " |      Return repr(self).\n",
      " |\n",
      " |  display_point(self) -> None\n",
      " |\n",
      " |  distance(self, other: 'Point') -> float\n",
      " |\n",
      " |  locate(self) -> str\n",
      " |\n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |\n",
      " |  __dict__\n",
      " |      dictionary for instance variables\n",
      " |\n",
      " |  __weakref__\n",
      " |      list of weak references to the object\n",
      "\n",
      "\n",
      "Class Docstring: None\n",
      "Annotations: {'x': <class 'float'>, 'y': <class 'float'>}\n",
      "distance Docstring: None\n",
      "locate Docstring: None\n",
      "repr Docstring: None\n",
      "display_point Docstring: None\n"
     ]
    }
   ],
   "source": [
    "from math import sqrt\n",
    "\n",
    "class Point:\n",
    "  \n",
    "\n",
    "    def __init__(self, x: float, y: float):\n",
    "\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def distance(self, other: \"Point\") -> float:\n",
    "    \n",
    "        return sqrt((self.x - other.x)**2 + (self.y - other.y)**2)\n",
    "\n",
    "    def locate(self) -> str:\n",
    "      \n",
    "        if self.x > 0 and self.y > 0:\n",
    "            return \"First Quadrant\"\n",
    "        elif self.x < 0 and self.y > 0:\n",
    "            return \"Second Quadrant\"\n",
    "        elif self.x < 0 and self.y < 0:\n",
    "            return \"Third Quadrant\"\n",
    "        elif self.x > 0 and self.y < 0:\n",
    "            return \"Fourth Quadrant\"\n",
    "        elif self.x == 0 and self.y != 0:\n",
    "            return \"On the Y-axis\"\n",
    "        elif self.y == 0 and self.x != 0:\n",
    "            return \"On the X-axis\"\n",
    "        else:\n",
    "            return \"At the Origin\"\n",
    "\n",
    "    def __repr__(self) -> str:\n",
    "  \n",
    "        return f\"({self.x}, {self.y})\"\n",
    "\n",
    "    def display_point(self) -> None:\n",
    "        \n",
    "        print(f\"Point: ({self.x}, {self.y})\")\n",
    "\n",
    "# a. Define point1 and pass two numbers\n",
    "p1 = Point(3, 4)\n",
    "\n",
    "# b. Make another instance of the point class\n",
    "p2 = Point(-5, 12)\n",
    "\n",
    "# c. Print p1 and p2 using the print command\n",
    "print(f\"p1: {p1}\")  # (3, 4)\n",
    "print(f\"p2: {p2}\")  # (-5, 12)\n",
    "\n",
    "# d. Print the location of both points\n",
    "print(f\"Location of p1: {p1.locate()}\")  # First Quadrant\n",
    "print(f\"Location of p2: {p2.locate()}\")  # Second Quadrant\n",
    "\n",
    "# e. Print the coordinates using the object and dot operator\n",
    "print(f\"Coordinates of p1: ({p1.x}, {p1.y})\")\n",
    "print(f\"Coordinates of p2: ({p2.x}, {p2.y})\")\n",
    "\n",
    "# f. Use the display_point method to print the points\n",
    "p1.display_point()\n",
    "p2.display_point()\n",
    "\n",
    "# g. Calculate the distance between these two points\n",
    "distance = p1.distance(p2)\n",
    "print(f\"Distance between p1 and p2: {distance:.2f}\")\n",
    "\n",
    "# h. Call the __dict__ by the class name\n",
    "print(\"Class __dict__:\", Point.__dict__)\n",
    "\n",
    "# i. Call the __dict__ on the object of the class\n",
    "print(\"p1 __dict__:\", p1.__dict__)\n",
    "print(\"p2 __dict__:\", p2.__dict__)\n",
    "\n",
    "# j. Pass the class name to help\n",
    "help(Point)\n",
    "\n",
    "# k. Print the doc-string and annotations of both the class and each instance method\n",
    "print(\"\\nClass Docstring:\", Point.__doc__)\n",
    "print(\"Annotations:\", Point.__init__.__annotations__)\n",
    "print(\"distance Docstring:\", Point.distance.__doc__)\n",
    "print(\"locate Docstring:\", Point.locate.__doc__)\n",
    "print(\"repr Docstring:\", Point.__repr__.__doc__)\n",
    "print(\"display_point Docstring:\", Point.display_point.__doc__)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "24171d4b-01da-471c-b0f1-e074acace438",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "point_1.x: 3, point_1.y: 4\n",
      "Point: (3, 4)\n",
      "Point: (5, 0)\n",
      "Point: (0, 0)\n"
     ]
    }
   ],
   "source": [
    "from math import sqrt\n",
    "\n",
    "class Point:\n",
    "  \n",
    "    def __init__(self, x: float = 0, y: float = 0):\n",
    "   \n",
    "        self.x = x\n",
    "        self.y = y\n",
    "\n",
    "    def distance(self, other: \"Point\") -> float:\n",
    "    \n",
    "        return sqrt((self.x - other.x)**2 + (self.y - other.y)**2)\n",
    "\n",
    "    def locate(self) -> str:\n",
    "      \n",
    "        if self.x > 0 and self.y > 0:\n",
    "            return \"First Quadrant\"\n",
    "        elif self.x < 0 and self.y > 0:\n",
    "            return \"Second Quadrant\"\n",
    "        elif self.x < 0 and self.y < 0:\n",
    "            return \"Third Quadrant\"\n",
    "        elif self.x > 0 and self.y < 0:\n",
    "            return \"Fourth Quadrant\"\n",
    "        elif self.x == 0 and self.y != 0:\n",
    "            return \"On the Y-axis\"\n",
    "        elif self.y == 0 and self.x != 0:\n",
    "            return \"On the X-axis\"\n",
    "        else:\n",
    "            return \"At the Origin\"\n",
    "\n",
    "    def __repr__(self) -> str:\n",
    "      \n",
    "        return f\"({self.x}, {self.y})\"\n",
    "\n",
    "    def show(self) -> None:\n",
    "      \n",
    "        print(f\"Point: ({self.x}, {self.y})\")\n",
    "\n",
    "# a. Define point_1 by passing two arguments\n",
    "point_1 = Point(3, 4)\n",
    "print(f\"point_1.x: {point_1.x}, point_1.y: {point_1.y}\")\n",
    "point_1.show()\n",
    "\n",
    "# b. Define another object point_2 and pass one argument\n",
    "point_2 = Point(5) \n",
    "point_2.show()\n",
    "\n",
    "# c. Define another object point_3 and pass no argument\n",
    "point_3 = Point() \n",
    "point_3.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3677bab-5c27-41f8-bf80-e28961b7ab34",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
